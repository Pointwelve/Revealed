# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc '⚙️ Encrypt configuration using `gpg`. Default directory is `Resources/Configurations`.'\
       'Recommended to encrypt any secrets e.g **API_KEYS, configuration json/plist** to avoid checking in these file in git'\
       'By using gpg, we can encrypt any files with a **passphrase** and it will be in `.gpg` binary format.'\
       'User is able to use the decrypt the files by providing a passphrase using gpg". '\
       'You can refer to the `encrypt_configurations` method on how to encrypt the files. '\
       'e.g . `gpg --batch --yes --passphrase YOUR_PASSPHRASE --output \"YOUR_INPUT_FILE\" -c \"YOUR_OUTPUT_FILE_.GPG\`'
  lane :encrypt_configs do
    encrypt_configurations
  end

  desc '⚙️ Decrypt configuration using `gpg`. Default directory is `Resources/Configurations`.'\
  'By using gpg, we can decrypt all `.gpg` files by providing a passphrase to it.'\
  'The decrypt_configs lane will be run on every setup lane to enable initial setup.'\
  'You can refer to the `decrypt_configurations` method on how to encrypt the files.'\
  'e.g . `gpg --batch --yes --passphrase YOUR_PASSPHRASE --output \"YOUR_INPUT_FILE.GPG\" --decrypt \"YOUR_OUTPUT_FILE\`'
  lane :decrypt_configs do
    decrypt_configurations
  end

  desc '⚙️ Bootstrap and download Carthage dependencies from Rome Cache. This will download depedencies following the Cartfile.lock.'\
       '**Note: This will not update the dependencies.**'
  lane :carthage_bootstrap do
    carthage_bootstrap
  end

  desc "⚙️ Setup dependencies and tools to get ready for development."
  lane :setup do
    setup
  end

  desc "⚙️ build and test"
  lane :build do
    decrypt_configurations
    carthage_bootstrap
    
    scan(
      project: "Revealed.xcodeproj",
      scheme: "Revealed",
      clean: true,
      devices: ["iPhone 8"]
    )
  end

  lane :certificates do
    decrypt_configurations
    matchCerts
  end
  
  desc "⚙️ release"
  lane :release do
    isReleasable = analyze_commits(match: '*')
    
    if !isReleasable 
      UI.message("Release not required.")
      next
    else
      decrypt_configurations
      carthage_bootstrap
      version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
      build = sh("cd ..; git rev-list --all --count")
      increment_version_number(version_number: version, 
        xcodeproj: "Revealed.xcodeproj")
      increment_build_number(build_number: build, xcodeproj: "Revealed.xcodeproj")
      matchCerts
      build_app(
        project: "Revealed.xcodeproj",
        scheme: "Revealed",
        clean: true,
        export_options: {
          provisioningProfiles: { 
            "com.pointwelve.app.revealed" => "match AppStore com.pointwelve.app.revealed"
           }
       }
      )
      upload_to_testflight(skip_waiting_for_build_processing: true)
      tag_master(version)
      rome(
        command: "upload",
        platform: "iOS",
      )
    end
  end

  def tag_master(version)
    reset_git_repo(force: true)
    add_git_tag(tag: "#{version}")
    push_to_git_remote(
      remote_branch: "master",
      tags: true
    )
  end

  desc "🚀 Download graphql schema"
  lane :download_schema do |options|
    token = options[:token] || ENV['GRAPHQL_TOKEN']
    end_point = options[:end_point] || ENV['GRAPHQL_ENDPOINT']
    Dir.chdir("..") do
      sh("apollo schema:download --endpoint='#{end_point}' --header='Authorization: #{token}'")
      sh("mv schema.json Revealed/GraphQL/schema.json")
    end

    generate_graphql
  end

  desc "🚀 Generate GraphQL API"
  lane :generate_graphql do |options|
    Dir.chdir("../Revealed") do
      script_path="Carthage/Checkouts/apollo-ios/scripts"
      # Generate API
      sh("../#{script_path}/run-bundled-codegen.sh codegen:generate --target=swift --includes=./**/GraphQL/*.graphql --localSchemaFile='GraphQL/schema.json' GraphQL/GraphQL.generated.swift")
    end

    Dir.chdir("..") do
      # Run sourcery
      sh("sourcery")
    end
  end

  def encrypt_configurations
    if is_ci?
      UI.message("Getting encryption paraphrase from environment variable:..")
      passphrase = ENV["UNICORN"]
    else
      UI.message("Getting encryption paraphrase from prompt:..")
      passphrase = prompt(text: "Paraphrase to decrypt configs: ")
    end

    Dir.chdir("..") do
      # Encrypt Google Cloud Config
      sh("gpg --batch --yes --passphrase #{passphrase} --output \"gc_keys.gpg\" -c \"gc_keys.json\"", log: false)
    end

    Dir.chdir("../Resources/Configurations") do
      # Encrypt Auth0 configs
      sh("gpg --batch --yes --passphrase #{passphrase} --output \"Auth0/fake-unicorn.gpg\" -c \"Auth0/Auth0.plist\"", log: false)
      sh("gpg --batch --yes --passphrase #{passphrase} --output \"GraphQL/fake-unicorn.gpg\" -c \"GraphQL/GraphQL.plist\"", log: false)
    end
  end

  def decrypt_configurations
    if is_ci?
      UI.message("Getting encryption paraphrase from environment variable:..")
      passphrase = ENV["UNICORN"]
      UI.error("Passphrase not found in environment!") if passphrase.nil? || passphrase.empty?
    else
      UI.message("Getting encryption paraphrase from prompt:..")
      passphrase = ENV["UNICORN"] || UI.password("Paraphrase to decrypt configs: ")
    end
    Dir.chdir("..") do
      # Encrypt Google Cloud Config
      sh("gpg --batch --yes --passphrase #{passphrase} --output \"gc_keys.json\" --decrypt \"gc_keys.gpg\"", log: false)
    end

    Dir.chdir("../Resources/Configurations") do
      # Decrypt Auth0 configs
      sh("gpg --batch --yes --passphrase #{passphrase} --output \"Auth0/Auth0.plist\" --decrypt \"Auth0/fake-unicorn.gpg\"", log: false)
      sh("gpg --batch --yes --passphrase #{passphrase} --output \"GraphQL/GraphQL.plist\" --decrypt \"GraphQL/fake-unicorn.gpg\"", log: false)
    end
  end

  def setup
    decrypt_configurations
    Dir.chdir("..") do
      sh("open Revealed.xcodeproj")
    end
  end

  def carthage_bootstrap
    carthage(
      command: "bootstrap",
      use_ssh: false,
      verbose: false,
      platform: "iOS",
      configuration: "Release",
      cache_builds: true,
    )
  end


  def matchCerts 
    match(type: "development", 
      app_identifier: ["com.pointwelve.app.revealed"],
         readonly: is_ci)
    match(type: "adhoc", 
      app_identifier: ["com.pointwelve.app.revealed"],
         readonly: is_ci)
    match(type: "appstore", 
      app_identifier: ["com.pointwelve.app.revealed"],
         readonly: is_ci)
  end
end
